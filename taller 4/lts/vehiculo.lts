set Alphabet = 	{abort, arrived, down, goDown, goUp, up, gotoLoc, land, landed,
                 moveE, moveN, moveS, moveW, toggleVideo, tVideo, takeOff,
                 takenOff}
set UserActions = {gotoLoc, land, takeOff,  goDown, goUp, toggleVideo, abort}
set UserEvents = {arrived, takenOff, landed}
set VehicleActions = {down, up, moveE, moveN, moveS, moveW, tVideo}

CONTROLLER = IDLE,
IDLE = ( gotoLoc -> MOVING | gotoLoc -> arrived -> IDLE | land -> LANDING 
           | takeOff -> TAKINGOFF | goUp -> up -> IDLE | goUp -> IDLE 
           | goDown -> down -> IDLE | goDown -> IDLE 
           | toggleVideo -> tVideo -> IDLE),
MOVING = ({moveN, moveS, moveE, moveW} -> MOVING | abort -> IDLE 
           | {moveN, moveS, moveE, moveW} -> arrived -> IDLE),
LANDING = (down -> LANDING | down -> landed -> IDLE),
TAKINGOFF = (up -> TAKINGOFF | up -> (takenOff -> IDLE 
           | abort -> IDLE) | abort -> IDLE).

USER = ({UserActions,UserEvents} -> USER).
VEHICLE = ({VehicleActions} -> VEHICLE).

||SYSTEM = (USER || CONTROLLER || VEHICLE).

// No tenemos claro si en 3 tenemos que usar safety o deadlock de esta herramienta. 
// En 4 estamos casi seguros, ya que la propiedad a probar es que no sucede otra cosa que moves entre gotoLoc y abort o arrived.

//3.a Hay una posibilidad en la que la precondicion gotoLoc se cumple pero no puedo hacer abort->land y es gotoLoc -> arrived -> IDLE en IDLE
//Queremos entonces un automata que compuesto con SYSTEM, revele ese caso. Probamos varias posibilidades, pero todas tienen un error conceptual.
//USECASE_Moving = 
//3.b Este caso de uso vale siempre que se cumple la precondicion. Pero como en a) no encontramos la forma de escribir el automata que haga valer esa propiedad de safety (?
//USECASE_TakingOff = 

//4 De nuevo, creemos que esto se aproxima. Queremos expresar que cualquier traza que realice acciones invalidas es invalida y vaya a ERROR
//Queremos que sincronize con abort y arrived por lo tanto en PRE esas acciones aparecen como validas.
//Como SYSTEM cumple con la la propiedad de safety, para probar que si no se cumpliese este automata compuesto con SYSTEM lo detecta, 
//agregamos una accion invalida en SYSTEM dentro de los moves como down: {moveN, moveS, moveE, moveW, down}
//Notar que no la escribimos como una property, ya que lo escribimos como un automata en donde si lo malo sucede va a ERROR.
set Invalid = {down, goDown, goUp, up, gotoLoc, land, landed, toggleVideo, tVideo, takeOff, takenOff}
ONLYMOVES = (gotoLoc -> PRE),
PRE = ({Invalid} -> ERROR | abort -> ONLYMOVES | arrived -> ONLYMOVES).

//Ayudita:
||Check_UseCaseMoving = (SYSTEM || USECASE_Moving).

||Check_UseCaseTakingOff = (SYSTEM || USECASE_TakingOff).

||Check_OnlyMoves = (SYSTEM || ONLYMOVES).
